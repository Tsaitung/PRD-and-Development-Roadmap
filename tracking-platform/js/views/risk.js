/**
 * È¢®Èö™ÁÆ°ÁêÜË¶ñÂúñ - È°ØÁ§∫È¢®Èö™Ë©ï‰º∞„ÄÅÂïèÈ°åËøΩËπ§ÂíåÈ†êË≠¶
 */

export class RiskView {
    constructor(app) {
        this.app = app;
        this.container = document.getElementById('risk-tab');
        this.charts = {};
        this.riskThresholds = {
            progress: { high: 20, medium: 50 },
            testCoverage: { high: 30, medium: 60 },
            prdComplete: { high: 30, medium: 70 }
        };
    }
    
    render() {
        const data = this.app.getData();
        if (!data) return;
        
        // ÂàÜÊûêÈ¢®Èö™
        this.analyzeRisks(data);
        
        // Ê∏≤ÊüìÈ¢®Èö™Ê¶ÇË¶Ω
        this.renderRiskOverview();
        
        // Ê∏≤ÊüìÈ¢®Èö™Áü©Èô£
        this.renderRiskMatrix();
        
        // Ê∏≤ÊüìÈ¢®Èö™ÂàóË°®
        this.renderRiskList();
        
        // Ê∏≤ÊüìÂª∫Ë≠∞Ë°åÂãï
        this.renderActionItems();
    }
    
    analyzeRisks(data) {
        this.risks = {
            critical: [],
            high: [],
            medium: [],
            low: []
        };
        
        data.modules.forEach(module => {
            const risks = this.assessModuleRisks(module);
            risks.forEach(risk => {
                this.risks[risk.level].push({
                    ...risk,
                    module: module
                });
            });
        });
    }
    
    assessModuleRisks(module) {
        const risks = [];
        
        // ÈÄ≤Â∫¶È¢®Èö™
        if (module.progress < this.riskThresholds.progress.high) {
            risks.push({
                type: 'progress',
                level: 'critical',
                title: 'ÈÄ≤Â∫¶Âö¥ÈáçËêΩÂæå',
                description: `Ê®°ÁµÑ ${module.code} ÈÄ≤Â∫¶ÂÉÖ ${module.progress}%ÔºåÈÅ†‰ΩéÊñºÈ†êÊúü`,
                impact: 'ÂèØËÉΩÂΩ±ÈüøÂ∞àÊ°àÊï¥È´î‰∏äÁ∑öÊôÇÁ®ã',
                mitigation: 'ÈúÄË¶ÅÁ´ãÂç≥ÂàÜÈÖçÊõ¥Â§öË≥áÊ∫êÊàñË™øÊï¥ÁØÑÂúç'
            });
        } else if (module.progress < this.riskThresholds.progress.medium) {
            risks.push({
                type: 'progress',
                level: 'high',
                title: 'ÈÄ≤Â∫¶ËêΩÂæå',
                description: `Ê®°ÁµÑ ${module.code} ÈÄ≤Â∫¶ÁÇ∫ ${module.progress}%`,
                impact: 'ÂèØËÉΩÂª∂ÈÅ≤Ë©≤Ê®°ÁµÑ‰∏äÁ∑ö',
                mitigation: 'Âª∫Ë≠∞Â¢ûÂä†‰∫∫ÂäõÊàñÂÑ™ÂåñÈñãÁôºÊµÅÁ®ã'
            });
        }
        
        // Ê∏¨Ë©¶È¢®Èö™
        const hasUnitTest = module.status.unitTest?.status === '‚úÖ' || module.status.unitTest?.status === 'üü°';
        const hasIntegrationTest = module.status.integrationTest?.status === '‚úÖ' || module.status.integrationTest?.status === 'üü°';
        
        if (!hasUnitTest && !hasIntegrationTest && module.progress > 30) {
            risks.push({
                type: 'testing',
                level: 'high',
                title: 'Áº∫‰πèÊ∏¨Ë©¶Ë¶ÜËìã',
                description: `Ê®°ÁµÑ ${module.code} Â∞öÊú™ÈñãÂßã‰ªª‰ΩïÊ∏¨Ë©¶`,
                impact: 'ÂìÅË≥™È¢®Èö™È´òÔºåÂèØËÉΩÁî¢ÁîüÂ§ßÈáèÈåØË™§',
                mitigation: 'Á´ãÂç≥ÈñãÂßãÊí∞ÂØ´ÂñÆÂÖÉÊ∏¨Ë©¶ÂíåÊï¥ÂêàÊ∏¨Ë©¶'
            });
        }
        
        // PRDÈ¢®Èö™
        const prdStatus = module.status.prd?.status;
        if ((prdStatus === 'üî¥' || prdStatus === '‚ö™') && module.progress > 0) {
            risks.push({
                type: 'documentation',
                level: 'medium',
                title: 'PRDÊú™ÂÆåÊàê',
                description: `Ê®°ÁµÑ ${module.code} Â∑≤ÈñãÂßãÈñãÁôº‰ΩÜPRDÊú™ÂÆåÊàê`,
                impact: 'ÂèØËÉΩÂ∞éËá¥ÈúÄÊ±ÇÁêÜËß£ÂÅèÂ∑Æ',
                mitigation: 'ÂÑòÂø´ÂÆåÊàêPRDÊñáÊ™î'
            });
        }
        
        // Êï¥ÂêàÈ¢®Èö™
        if (module.status.integration?.status === 'üî¥' && module.progress > 50) {
            risks.push({
                type: 'integration',
                level: 'high',
                title: 'Êï¥ÂêàÊú™ÈñãÂßã',
                description: `Ê®°ÁµÑ ${module.code} ÈÄ≤Â∫¶Â∑≤ÈÅéÂçä‰ΩÜÂ∞öÊú™ÈñãÂßãÊï¥Âêà`,
                impact: 'ÂæåÊúüÊï¥ÂêàÂèØËÉΩÁôºÁèæÂ§ßÈáèÂïèÈ°å',
                mitigation: 'ÈñãÂßãÈÄ≤Ë°åÊ®°ÁµÑÈñìÊï¥ÂêàÊ∏¨Ë©¶'
            });
        }
        
        return risks;
    }
    
    renderRiskOverview() {
        const container = document.getElementById('risk-overview');
        if (!container) return;
        
        const totalRisks = Object.values(this.risks).reduce((sum, risks) => sum + risks.length, 0);
        
        const html = `
            <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
                <div class="bg-red-50 border border-red-200 rounded-lg p-4">
                    <div class="flex items-center justify-between">
                        <div>
                            <p class="text-sm font-medium text-red-600">Âö¥ÈáçÈ¢®Èö™</p>
                            <p class="text-2xl font-bold text-red-700">${this.risks.critical.length}</p>
                        </div>
                        <i class="fas fa-exclamation-circle text-3xl text-red-500"></i>
                    </div>
                </div>
                
                <div class="bg-orange-50 border border-orange-200 rounded-lg p-4">
                    <div class="flex items-center justify-between">
                        <div>
                            <p class="text-sm font-medium text-orange-600">È´òÈ¢®Èö™</p>
                            <p class="text-2xl font-bold text-orange-700">${this.risks.high.length}</p>
                        </div>
                        <i class="fas fa-exclamation-triangle text-3xl text-orange-500"></i>
                    </div>
                </div>
                
                <div class="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
                    <div class="flex items-center justify-between">
                        <div>
                            <p class="text-sm font-medium text-yellow-600">‰∏≠È¢®Èö™</p>
                            <p class="text-2xl font-bold text-yellow-700">${this.risks.medium.length}</p>
                        </div>
                        <i class="fas fa-info-circle text-3xl text-yellow-500"></i>
                    </div>
                </div>
                
                <div class="bg-blue-50 border border-blue-200 rounded-lg p-4">
                    <div class="flex items-center justify-between">
                        <div>
                            <p class="text-sm font-medium text-blue-600">Á∏ΩÈ¢®Èö™Êï∏</p>
                            <p class="text-2xl font-bold text-blue-700">${totalRisks}</p>
                        </div>
                        <i class="fas fa-shield-alt text-3xl text-blue-500"></i>
                    </div>
                </div>
            </div>
        `;
        
        container.innerHTML = html;
    }
    
    renderRiskMatrix() {
        const container = document.getElementById('risk-matrix-container');
        if (!container) return;
        
        // Ê∫ñÂÇôÁü©Èô£Êï∏Êìö
        const matrixData = this.prepareMatrixData();
        
        // Ê∏≤ÊüìÈ¢®Èö™Áü©Èô£ÂúñË°®
        const ctx = container.querySelector('canvas');
        if (!ctx) return;
        
        // Èä∑ÊØÄËàäÂúñË°®
        if (this.charts.riskMatrix) {
            this.charts.riskMatrix.destroy();
        }
        
        this.charts.riskMatrix = new Chart(ctx, {
            type: 'scatter',
            data: {
                datasets: [
                    {
                        label: 'Âö¥ÈáçÈ¢®Èö™',
                        data: matrixData.critical,
                        backgroundColor: 'rgba(239, 68, 68, 0.6)',
                        borderColor: 'rgba(239, 68, 68, 1)',
                        pointRadius: 8
                    },
                    {
                        label: 'È´òÈ¢®Èö™',
                        data: matrixData.high,
                        backgroundColor: 'rgba(251, 146, 60, 0.6)',
                        borderColor: 'rgba(251, 146, 60, 1)',
                        pointRadius: 7
                    },
                    {
                        label: '‰∏≠È¢®Èö™',
                        data: matrixData.medium,
                        backgroundColor: 'rgba(250, 204, 21, 0.6)',
                        borderColor: 'rgba(250, 204, 21, 1)',
                        pointRadius: 6
                    }
                ]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    x: {
                        title: {
                            display: true,
                            text: 'ÁôºÁîüÂèØËÉΩÊÄß'
                        },
                        min: 0,
                        max: 100,
                        ticks: {
                            callback: value => value + '%'
                        }
                    },
                    y: {
                        title: {
                            display: true,
                            text: 'ÂΩ±ÈüøÁ®ãÂ∫¶'
                        },
                        min: 0,
                        max: 100,
                        ticks: {
                            callback: value => value + '%'
                        }
                    }
                },
                plugins: {
                    tooltip: {
                        callbacks: {
                            label: function(context) {
                                const risk = context.raw.risk;
                                return [
                                    `${risk.module.code} - ${risk.module.zhName}`,
                                    `È°ûÂûã: ${risk.title}`,
                                    `ÂèØËÉΩÊÄß: ${context.parsed.x}%`,
                                    `ÂΩ±Èüø: ${context.parsed.y}%`
                                ];
                            }
                        }
                    }
                },
                onClick: (event, elements) => {
                    if (elements.length > 0) {
                        const datasetIndex = elements[0].datasetIndex;
                        const index = elements[0].index;
                        const risk = this.charts.riskMatrix.data.datasets[datasetIndex].data[index].risk;
                        this.showRiskDetails(risk);
                    }
                }
            }
        });
    }
    
    prepareMatrixData() {
        const data = {
            critical: [],
            high: [],
            medium: []
        };
        
        // Ë®àÁÆóÊØèÂÄãÈ¢®Èö™ÁöÑÂèØËÉΩÊÄßÂíåÂΩ±Èüø
        Object.entries(this.risks).forEach(([level, risks]) => {
            if (level === 'low') return;
            
            risks.forEach(risk => {
                const point = {
                    x: this.calculateProbability(risk),
                    y: this.calculateImpact(risk),
                    risk: risk
                };
                
                if (data[level]) {
                    data[level].push(point);
                }
            });
        });
        
        return data;
    }
    
    calculateProbability(risk) {
        // Ê†πÊìöÈ¢®Èö™È°ûÂûãÂíåÁï∂ÂâçÁãÄÊÖãË®àÁÆóÁôºÁîüÂèØËÉΩÊÄß
        const baseProb = {
            progress: 80,
            testing: 70,
            documentation: 60,
            integration: 75
        };
        
        let prob = baseProb[risk.type] || 50;
        
        // Ê†πÊìöÊ®°ÁµÑÈÄ≤Â∫¶Ë™øÊï¥
        if (risk.module.progress < 20) prob += 15;
        else if (risk.module.progress < 50) prob += 10;
        
        return Math.min(95, prob);
    }
    
    calculateImpact(risk) {
        // Ê†πÊìöÈ¢®Èö™Á≠âÁ¥öË®àÁÆóÂΩ±ÈüøÁ®ãÂ∫¶
        const baseImpact = {
            critical: 85,
            high: 65,
            medium: 45,
            low: 25
        };
        
        return baseImpact[risk.level] || 50;
    }
    
    renderRiskList() {
        const container = document.getElementById('risk-list');
        if (!container) return;
        
        let html = '<div class="space-y-4">';
        
        // ÊåâÈ¢®Èö™Á≠âÁ¥öÂàÜÁµÑÈ°ØÁ§∫
        ['critical', 'high', 'medium'].forEach(level => {
            if (this.risks[level].length === 0) return;
            
            const levelConfig = {
                critical: { color: 'red', icon: 'fa-exclamation-circle', text: 'Âö¥ÈáçÈ¢®Èö™' },
                high: { color: 'orange', icon: 'fa-exclamation-triangle', text: 'È´òÈ¢®Èö™' },
                medium: { color: 'yellow', icon: 'fa-info-circle', text: '‰∏≠È¢®Èö™' }
            };
            
            const config = levelConfig[level];
            
            html += `
                <div class="border rounded-lg overflow-hidden">
                    <div class="bg-${config.color}-50 px-4 py-2 border-b border-${config.color}-200">
                        <h3 class="font-medium text-${config.color}-700 flex items-center">
                            <i class="fas ${config.icon} mr-2"></i>
                            ${config.text} (${this.risks[level].length})
                        </h3>
                    </div>
                    <div class="p-4 space-y-3">
            `;
            
            this.risks[level].forEach((risk, index) => {
                html += `
                    <div class="border rounded p-3 hover:shadow-md transition-all cursor-pointer"
                         onclick="window.trackingApp.views.risk.showRiskDetails(${JSON.stringify(risk).replace(/"/g, '&quot;')})">
                        <div class="flex items-start justify-between">
                            <div class="flex-1">
                                <h4 class="font-medium text-gray-900">
                                    ${risk.module.code} - ${risk.title}
                                </h4>
                                <p class="text-sm text-gray-600 mt-1">${risk.description}</p>
                                <div class="flex items-center mt-2 text-xs text-gray-500">
                                    <span class="mr-4">
                                        <i class="fas fa-chart-line mr-1"></i>
                                        ÈÄ≤Â∫¶: ${risk.module.progress}%
                                    </span>
                                    <span>
                                        <i class="fas fa-tag mr-1"></i>
                                        È°ûÂûã: ${this.getRiskTypeLabel(risk.type)}
                                    </span>
                                </div>
                            </div>
                            <button class="ml-3 text-${config.color}-600 hover:text-${config.color}-800">
                                <i class="fas fa-chevron-right"></i>
                            </button>
                        </div>
                    </div>
                `;
            });
            
            html += '</div></div>';
        });
        
        html += '</div>';
        container.innerHTML = html;
    }
    
    getRiskTypeLabel(type) {
        const labels = {
            progress: 'ÈÄ≤Â∫¶È¢®Èö™',
            testing: 'Ê∏¨Ë©¶È¢®Èö™',
            documentation: 'ÊñáÊ™îÈ¢®Èö™',
            integration: 'Êï¥ÂêàÈ¢®Èö™'
        };
        return labels[type] || 'ÂÖ∂‰ªñÈ¢®Èö™';
    }
    
    renderActionItems() {
        const container = document.getElementById('action-items');
        if (!container) return;
        
        // ÁîüÊàêË°åÂãïÂª∫Ë≠∞
        const actions = this.generateActionItems();
        
        let html = '<div class="space-y-3">';
        
        actions.forEach((action, index) => {
            html += `
                <div class="flex items-start p-3 border rounded hover:bg-gray-50">
                    <input type="checkbox" id="action-${index}" class="mt-1 mr-3"
                           onchange="window.trackingApp.views.risk.toggleAction(${index})">
                    <label for="action-${index}" class="flex-1 cursor-pointer">
                        <div class="font-medium text-gray-900">${action.title}</div>
                        <div class="text-sm text-gray-600 mt-1">${action.description}</div>
                        <div class="flex items-center mt-2 text-xs text-gray-500">
                            <span class="mr-3">
                                <i class="fas fa-flag mr-1"></i>
                                ÂÑ™ÂÖàÁ¥ö: ${action.priority}
                            </span>
                            <span>
                                <i class="fas fa-users mr-1"></i>
                                Ë≤†Ë≤¨: ${action.assignee}
                            </span>
                        </div>
                    </label>
                </div>
            `;
        });
        
        html += '</div>';
        container.innerHTML = html;
    }
    
    generateActionItems() {
        const actions = [];
        
        // Ê†πÊìöÈ¢®Èö™ÁîüÊàêË°åÂãïÈ†ÖÁõÆ
        this.risks.critical.forEach(risk => {
            actions.push({
                title: `Á´ãÂç≥ËôïÁêÜ ${risk.module.code} Ê®°ÁµÑÁöÑ${risk.title}`,
                description: risk.mitigation,
                priority: 'Á∑äÊÄ•',
                assignee: 'Â∞àÊ°àÁ∂ìÁêÜ',
                riskId: risk.id
            });
        });
        
        this.risks.high.forEach(risk => {
            actions.push({
                title: `ËôïÁêÜ ${risk.module.code} Ê®°ÁµÑÁöÑ${risk.title}`,
                description: risk.mitigation,
                priority: 'È´ò',
                assignee: 'Ê®°ÁµÑË≤†Ë≤¨‰∫∫',
                riskId: risk.id
            });
        });
        
        // ÈôêÂà∂È°ØÁ§∫Êï∏Èáè
        return actions.slice(0, 10);
    }
    
    showRiskDetails(risk) {
        const content = `
            <div class="space-y-4">
                <div class="border-b pb-4">
                    <div class="flex items-center justify-between">
                        <h4 class="text-lg font-medium text-gray-900">${risk.title}</h4>
                        <span class="px-3 py-1 rounded-full text-sm font-medium"
                              style="background-color: ${this.getRiskLevelColor(risk.level)}; color: white;">
                            ${this.getRiskLevelText(risk.level)}
                        </span>
                    </div>
                    <p class="text-sm text-gray-600 mt-2">${risk.description}</p>
                </div>
                
                <div class="grid grid-cols-2 gap-4">
                    <div>
                        <h5 class="text-sm font-medium text-gray-700 mb-1">ÂΩ±ÈüøÊ®°ÁµÑ</h5>
                        <p class="text-sm">${risk.module.code} - ${risk.module.zhName}</p>
                    </div>
                    <div>
                        <h5 class="text-sm font-medium text-gray-700 mb-1">È¢®Èö™È°ûÂûã</h5>
                        <p class="text-sm">${this.getRiskTypeLabel(risk.type)}</p>
                    </div>
                    <div>
                        <h5 class="text-sm font-medium text-gray-700 mb-1">Ê®°ÁµÑÈÄ≤Â∫¶</h5>
                        <p class="text-sm">${risk.module.progress}%</p>
                    </div>
                    <div>
                        <h5 class="text-sm font-medium text-gray-700 mb-1">ÁôºÁîüÂèØËÉΩÊÄß</h5>
                        <p class="text-sm">${this.calculateProbability(risk)}%</p>
                    </div>
                </div>
                
                <div>
                    <h5 class="text-sm font-medium text-gray-700 mb-2">ÊΩõÂú®ÂΩ±Èüø</h5>
                    <p class="text-sm text-gray-600">${risk.impact}</p>
                </div>
                
                <div>
                    <h5 class="text-sm font-medium text-gray-700 mb-2">Âª∫Ë≠∞Á∑©Ëß£Êé™ÊñΩ</h5>
                    <p class="text-sm text-gray-600">${risk.mitigation}</p>
                </div>
                
                <div class="flex space-x-3 pt-4 border-t">
                    <button class="flex-1 bg-blue-500 hover:bg-blue-600 text-white py-2 rounded transition-all"
                            onclick="window.trackingApp.views.risk.createIssue('${risk.module.code}', '${risk.title}')">
                        <i class="fas fa-plus-circle mr-2"></i>Âª∫Á´ã Issue
                    </button>
                    <button class="flex-1 bg-purple-500 hover:bg-purple-600 text-white py-2 rounded transition-all"
                            onclick="window.trackingApp.switchTab('dashboard'); window.trackingApp.views.dashboard.showModuleDetails('${risk.module.code}')">
                        <i class="fas fa-eye mr-2"></i>Êü•ÁúãÊ®°ÁµÑ
                    </button>
                </div>
            </div>
        `;
        
        this.app.showModal('È¢®Èö™Ë©≥ÊÉÖ', content);
    }
    
    getRiskLevelColor(level) {
        const colors = {
            critical: '#EF4444',
            high: '#FB923C',
            medium: '#FACC15',
            low: '#3B82F6'
        };
        return colors[level] || '#6B7280';
    }
    
    getRiskLevelText(level) {
        const texts = {
            critical: 'Âö¥Èáç',
            high: 'È´ò',
            medium: '‰∏≠',
            low: '‰Ωé'
        };
        return texts[level] || 'Êú™Áü•';
    }
    
    createIssue(moduleCode, title) {
        // TODO: Êï¥Âêà GitHub Issues API
        this.app.showNotification('Issue Âª∫Á´ãÂäüËÉΩÈñãÁôº‰∏≠', 'info');
    }
    
    toggleAction(index) {
        // TODO: ÂØ¶ÁèæË°åÂãïÈ†ÖÁõÆÁãÄÊÖãËøΩËπ§
        const checkbox = document.getElementById(`action-${index}`);
        if (checkbox.checked) {
            this.app.showNotification('Â∑≤Ê®ôË®òÁÇ∫ÂÆåÊàê', 'success');
        }
    }
    
    exportRiskReport() {
        const report = this.generateRiskReport();
        this.app.utils.downloadFile(report, `risk-report-${new Date().toISOString().split('T')[0]}.csv`);
        this.app.showNotification('È¢®Èö™Â†±ÂëäÂ∑≤ÂåØÂá∫', 'success');
    }
    
    generateRiskReport() {
        const headers = ['È¢®Èö™Á≠âÁ¥ö', 'Ê®°ÁµÑ', 'È¢®Èö™È°ûÂûã', 'Ê®ôÈ°å', 'ÊèèËø∞', 'ÂΩ±Èüø', 'Á∑©Ëß£Êé™ÊñΩ'];
        const rows = [headers];
        
        ['critical', 'high', 'medium'].forEach(level => {
            this.risks[level].forEach(risk => {
                rows.push([
                    this.getRiskLevelText(level),
                    risk.module.code,
                    this.getRiskTypeLabel(risk.type),
                    risk.title,
                    risk.description,
                    risk.impact,
                    risk.mitigation
                ]);
            });
        });
        
        return rows.map(row => row.map(cell => `"${cell}"`).join(',')).join('\n');
    }
    
    destroy() {
        // Èä∑ÊØÄÂúñË°®
        Object.values(this.charts).forEach(chart => {
            if (chart && chart.destroy) {
                chart.destroy();
            }
        });
        this.charts = {};
    }
}