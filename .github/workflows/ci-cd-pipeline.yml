name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  NODE_VERSION: '18.x'
  PYTHON_VERSION: '3.11'
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ==================== Code Quality ====================
  code-quality:
    name: Code Quality Check
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📦 Install dependencies
      run: npm ci
      
    - name: 🔍 Run ESLint
      run: npm run lint
      
    - name: 📝 Run TypeScript check
      run: npx tsc --noEmit
      
    - name: 🎨 Check code formatting
      run: npx prettier --check "src/**/*.{ts,tsx,js,jsx,json}"
      
    - name: 🔒 Security audit
      run: npm audit --audit-level=moderate
      
    - name: 📊 SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # ==================== Testing ====================
  test-unit:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: code-quality
    
    strategy:
      matrix:
        node-version: ['16.x', '18.x', '20.x']
        
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔧 Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: 📦 Install dependencies
      run: npm ci
      
    - name: 🧪 Run unit tests
      run: npm run test:unit -- --coverage
      
    - name: 📊 Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        flags: unit
        name: unit-tests-node-${{ matrix.node-version }}
        
    - name: 📁 Archive test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: test-results-unit-${{ matrix.node-version }}
        path: |
          coverage/
          test-results/

  test-integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: code-quality
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: erp_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
          
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📦 Install dependencies
      run: npm ci
      
    - name: 🗄️ Run database migrations
      run: npm run db:migrate
      env:
        DATABASE_URL: postgresql://test:test@localhost:5432/erp_test
        
    - name: 🌱 Seed test data
      run: npm run db:seed
      env:
        DATABASE_URL: postgresql://test:test@localhost:5432/erp_test
        
    - name: 🧪 Run integration tests
      run: npm run test:integration -- --coverage
      env:
        DATABASE_URL: postgresql://test:test@localhost:5432/erp_test
        REDIS_URL: redis://localhost:6379
        
    - name: 📊 Upload coverage
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        flags: integration
        name: integration-tests

  test-e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [test-unit, test-integration]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📦 Install dependencies
      run: npm ci
      
    - name: 🎭 Install Playwright
      run: npx playwright install --with-deps
      
    - name: 🚀 Start application
      run: |
        npm run build
        npm run start &
        npx wait-on http://localhost:3000/health
        
    - name: 🧪 Run E2E tests
      run: npm run test:e2e
      
    - name: 📁 Upload test artifacts
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: e2e-test-results
        path: |
          test-results/
          playwright-report/

  # ==================== Build ====================
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [test-unit, test-integration]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📦 Install dependencies
      run: npm ci
      
    - name: 🏗️ Build application
      run: npm run build
      
    - name: 📦 Create deployment package
      run: |
        tar -czf deployment-package.tar.gz \
          dist/ \
          package*.json \
          .env.example \
          docker-compose.yml \
          Dockerfile
          
    - name: 📁 Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts
        path: deployment-package.tar.gz
        retention-days: 7

  # ==================== Docker Build ====================
  docker-build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push'
    
    permissions:
      contents: read
      packages: write
      
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔐 Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: 🏷️ Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: 🔧 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 🏗️ Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          NODE_VERSION=${{ env.NODE_VERSION }}
          BUILD_DATE=${{ github.event.head_commit.timestamp }}
          VCS_REF=${{ github.sha }}
          VERSION=${{ steps.meta.outputs.version }}

  # ==================== Documentation ====================
  generate-docs:
    name: Generate Documentation
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📦 Install dependencies
      run: npm ci
      
    - name: 📚 Generate API documentation
      run: npm run generate:api-docs
      
    - name: 🎨 Generate SDK
      run: npm run generate:sdk
      
    - name: 📖 Build documentation site
      run: |
        cd docs
        npm install
        npm run build
        
    - name: 📤 Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs/dist
        cname: docs.tsaitung.com

  # ==================== Security Scanning ====================
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.event_name == 'push'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔍 Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: 📊 Upload Trivy results to GitHub Security
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'
        
    - name: 🔐 Run Snyk security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high

  # ==================== Deploy to Staging ====================
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test-e2e, docker-build, security-scan]
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://staging.tsaitung.com
      
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔧 Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-1
        
    - name: 🚀 Deploy to ECS
      run: |
        aws ecs update-service \
          --cluster staging-cluster \
          --service erp-api-staging \
          --force-new-deployment
          
    - name: ⏳ Wait for deployment
      run: |
        aws ecs wait services-stable \
          --cluster staging-cluster \
          --services erp-api-staging
          
    - name: 🧪 Run smoke tests
      run: |
        npm run test:smoke -- --url=https://staging.tsaitung.com
        
    - name: 📢 Notify deployment
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        text: 'Staging deployment completed'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      if: always()

  # ==================== Deploy to Production ====================
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test-e2e, docker-build, security-scan]
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://api.tsaitung.com
      
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔧 Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-1
        
    - name: 📦 Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-artifacts
        
    - name: 🚀 Deploy to production (Blue-Green)
      run: |
        # Create new task definition
        aws ecs register-task-definition \
          --cli-input-json file://ecs-task-definition.json
          
        # Update service with new task definition
        aws ecs update-service \
          --cluster production-cluster \
          --service erp-api-production \
          --task-definition erp-api:latest \
          --deployment-configuration "maximumPercent=200,minimumHealthyPercent=100"
          
    - name: ⏳ Wait for deployment
      run: |
        aws ecs wait services-stable \
          --cluster production-cluster \
          --services erp-api-production
          
    - name: 🧪 Run smoke tests
      run: |
        npm run test:smoke -- --url=https://api.tsaitung.com
        
    - name: 📊 Update deployment metrics
      run: |
        aws cloudwatch put-metric-data \
          --namespace "ERP/Deployments" \
          --metric-name "SuccessfulDeployments" \
          --value 1 \
          --dimensions Environment=Production,Service=API
          
    - name: 🏷️ Create release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body: |
          ## Changes in this Release
          - Automated deployment from commit ${{ github.sha }}
          - View [commit details](https://github.com/${{ github.repository }}/commit/${{ github.sha }})
        draft: false
        prerelease: false
        
    - name: 📢 Notify deployment
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        text: |
          Production deployment completed!
          Version: v${{ github.run_number }}
          Commit: ${{ github.sha }}
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      if: always()

  # ==================== Rollback ====================
  rollback:
    name: Rollback Production
    runs-on: ubuntu-latest
    if: failure() && github.ref == 'refs/heads/main'
    needs: deploy-production
    
    steps:
    - name: 🔧 Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-1
        
    - name: ⏮️ Rollback to previous version
      run: |
        # Get previous task definition
        PREVIOUS_TASK_DEF=$(aws ecs describe-services \
          --cluster production-cluster \
          --services erp-api-production \
          --query 'services[0].deployments[1].taskDefinition' \
          --output text)
          
        # Update service with previous task definition
        aws ecs update-service \
          --cluster production-cluster \
          --service erp-api-production \
          --task-definition $PREVIOUS_TASK_DEF
          
    - name: 🚨 Alert rollback
      uses: 8398a7/action-slack@v3
      with:
        status: 'failure'
        text: '⚠️ Production deployment failed! Automatic rollback initiated.'
        webhook_url: ${{ secrets.SLACK_WEBHOOK_URGENT }}

  # ==================== Performance Testing ====================
  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔧 Setup K6
      run: |
        sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6
        
    - name: 🏃 Run performance tests
      run: |
        k6 run tests/performance/load-test.js \
          --out influxdb=http://metrics.tsaitung.com/k6
          
    - name: 📊 Analyze results
      run: |
        python scripts/analyze-performance.py
        
    - name: 📁 Upload performance report
      uses: actions/upload-artifact@v3
      with:
        name: performance-report
        path: performance-report.html

  # ==================== Cleanup ====================
  cleanup:
    name: Cleanup Old Resources
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
    - name: 🧹 Clean up old Docker images
      run: |
        # Clean up images older than 7 days
        docker image prune -a --force --filter "until=168h"
        
    - name: 🗑️ Clean up old artifacts
      uses: c-hive/gha-remove-artifacts@v1
      with:
        age: '7 days'
        skip-tags: true
        skip-recent: 5