version: '3.8'

services:
  # Development database with mounted init scripts
  postgres-dev:
    image: postgres:15-alpine
    container_name: tsaitung-db-dev
    environment:
      POSTGRES_DB: tsaitung_dev
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: devpassword
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
      - ./scripts/seed-data.sql:/docker-entrypoint-initdb.d/02-seed.sql:ro
    ports:
      - "5433:5432"
    networks:
      - tsaitung-dev-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 3s
      retries: 5

  # Development Redis
  redis-dev:
    image: redis:7-alpine
    container_name: tsaitung-redis-dev
    command: redis-server --appendonly yes
    volumes:
      - redis_dev_data:/data
    ports:
      - "6380:6379"
    networks:
      - tsaitung-dev-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  # Development app with hot reload
  app-dev:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: tsaitung-app-dev
    environment:
      NODE_ENV: development
      PORT: 3000
      DB_HOST: postgres-dev
      DB_PORT: 5432
      DB_NAME: tsaitung_dev
      DB_USER: postgres
      DB_PASSWORD: devpassword
      REDIS_HOST: redis-dev
      REDIS_PORT: 6379
      JWT_SECRET: dev-secret-key
      CORS_ORIGIN: "*"
      LOG_LEVEL: debug
    volumes:
      - ./src:/app/src:ro
      - ./package.json:/app/package.json:ro
      - ./tsconfig.json:/app/tsconfig.json:ro
      - ./nodemon.json:/app/nodemon.json:ro
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    ports:
      - "3000:3000"
      - "9229:9229" # Node.js debugger port
    networks:
      - tsaitung-dev-network
    depends_on:
      postgres-dev:
        condition: service_healthy
      redis-dev:
        condition: service_healthy
    command: npm run dev

  # Test database for integration tests
  postgres-test:
    image: postgres:15-alpine
    container_name: tsaitung-db-test
    environment:
      POSTGRES_DB: tsaitung_test
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: testpassword
    tmpfs:
      - /var/lib/postgresql/data
    ports:
      - "5434:5432"
    networks:
      - tsaitung-dev-network
    profiles:
      - test

  # Mailhog for email testing
  mailhog:
    image: mailhog/mailhog:latest
    container_name: tsaitung-mailhog
    ports:
      - "1025:1025" # SMTP server
      - "8025:8025" # Web UI
    networks:
      - tsaitung-dev-network
    profiles:
      - dev

networks:
  tsaitung-dev-network:
    driver: bridge

volumes:
  postgres_dev_data:
    driver: local
  redis_dev_data:
    driver: local